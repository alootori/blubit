import pandas as pd
import re
import matplotlib.pyplot as plt
import seaborn as sns
from sentence_transformers import SentenceTransformer, util

# Load Sentence Transformer Model
model = SentenceTransformer("intfloat/e5-large")  # Best for retrieval & similarity

# Expanded query set to include different synonyms
reference_queries = [
    "C m.",

]

# Encode all reference queries
query_embeddings = {query: model.encode(query) for query in reference_queries}

# Function to split text into sentences
def split_text(text):
    if pd.isna(text): return []  # Handle missing values

    # First split by newline (\n), then split each part by period (.)
    sentences = []
    for part in text.split("\n"):
        sentences.extend(re.split(r'\.\s*', part))  # Split by period with optional spaces

    # Clean sentences
    sentences = [s.strip() for s in sentences if len(s.strip()) > 5]  # Remove short/empty fragments
    return sentences

# Function to find max similarity & best matching sentence
def find_max_similarity(sentences):
    max_similarity = 0
    best_sentence = ""
    best_query = ""

    for sentence in sentences:
        sentence_embedding = model.encode(sentence)

        for query, query_embedding in query_embeddings.items():
            similarity_score = util.cos_sim(query_embedding, sentence_embedding)[0][0].item()

            if similarity_score > max_similarity:
                max_similarity = similarity_score
                best_sentence = sentence
                best_query = query  # Store the best-matching reference query

    return max_similarity, best_sentence, best_query

# Load claims dataset
df = pd.read_csv("cdata.csv")

# Process 
df["sentences"] = df["escription"].apply(split_text)
df[["max_similarity", "best_sentence", "best_query"]] = df["sentences"].apply(lambda x: find_max_similarity(x) if x else (0, "", ""))

# Visualize Similarity Distribution
plt.figure(figsize=(10,5))
sns.histplot(df["max_similarity"], bins=30, kde=True, color="blue")
plt.axvline(x=0.85, color="red", linestyle="--", label="85% Threshold")
plt.xlabel("Max Similarity Score")
plt.ylabel("Number ")
plt.title("Similarity Score Distribution")
plt.legend()
plt.show()

# Suggest an optimal threshold based on the distribution
suggested_threshold = df["max_similarity"].quantile(0.90)  # 90th percentile
print(f"ðŸ”¹ Suggested Optimal Threshold: {suggested_threshold:.2f}")

# Apply new threshold
threshold = max(0.85, suggested_threshold)  # Ensure it's not lower than 0.85
df["flagged"] = df["max_similarity"] >= threshold

# Save flagged 
df.to_csv("flagged_s.csv", index=False)

# Display flagged 
import ace_tools as tools
tools.display_dataframe_to_user(name="Flagged ", dataframe=df[df["flagged"]])
